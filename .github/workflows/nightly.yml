name: CMake Nightly Build

on:
  workflow_dispatch:
  schedule:
    - cron: "10 0 * * *"


env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: ubuntu-24.04

    strategy:
      matrix:
        targ: [raspi, pistorm, pistorm-classic]

    steps:
    - uses: actions/checkout@v4
      with: 
        submodules: 'true'

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: |
        sudo apt update
        sudo apt upgrade -y
        sudo apt install -y build-essential ninja-build device-tree-compiler
        sudo apt install -y gcc-14-aarch64-linux-gnu g++-14-aarch64-linux-gnu
        sudo cp /usr/aarch64-linux-gnu/include/gnu/stubs-lp64.h /usr/aarch64-linux-gnu/include/gnu/stubs-lp64_be.h
        cmake -E make_directory ${{runner.workspace}}/build
        cmake -E make_directory ${{runner.workspace}}/install

    - name: Configure CMake - RasPi
      if: ${{ matrix.targ == 'raspi' }}
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX=${{runner.workspace}}/install -DTARGET=raspi64 -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/toolchains/aarch64-linux-gnu.cmake

    - name: Configure CMake - PiStorm
      if: ${{ matrix.targ == 'pistorm' }}
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX=${{runner.workspace}}/install -DTARGET=raspi64 -DVARIANT=pistorm -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/toolchains/aarch64-linux-gnu.cmake

    - name: Configure CMake - PiStorm Classic
      if: ${{ matrix.targ == 'pistorm-classic' }}
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX=${{runner.workspace}}/install -DTARGET=raspi64 -DVARIANT=pistorm-classic -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/toolchains/aarch64-linux-gnu.cmake

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE

    - name: Install
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Create ARIX directory structure and generate initrd file
      run: cmake --install .

    - name: Archive
      working-directory: ${{runner.workspace}}/install
      shell: bash
      run: zip -r ./Emu68-${{matrix.targ}}.zip .

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: emu68-archive-${{matrix.targ}}
        path: ${{runner.workspace}}/install/Emu68-${{matrix.targ}}.zip
        retention-days: 5

  deploy:
    runs-on: ubuntu-24.04
    needs: build

    strategy:
      matrix:
        targ: [raspi, pistorm, pistorm-classic]

    steps:  
    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: emu68-archive-${{matrix.targ}}
        path: ${{runner.workspace}}/uploads

    - name: Deploy Raspi release
      id: deploy
      uses: WebFreak001/deploy-nightly@v2.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # automatically provided by github actions
      with:
        upload_url: https://uploads.github.com/repos/michalsc/Emu68/releases/39641306/assets{?name,label} # find out this value by opening https://api.github.com/repos/<owner>/<repo>/releases in your browser and copy the full "upload_url" value including the {?name,label} part
        release_id: 39641306 # same as above (id can just be taken out the upload_url, it's used to find old releases)
        asset_path: ${{runner.workspace}}/uploads/Emu68-${{matrix.targ}}.zip # path to archive to upload
        asset_name: Emu68-${{matrix.targ}}-$$.zip # name to upload the release as, use $$ to insert date (YYYYMMDD) and 6 letter commit hash
        asset_content_type: application/zip # required by GitHub API
        max_releases: 7 # optional, if there are more releases than this matching the asset_name, the oldest ones are going to be deleted

    - name: Declare some variables
      id: vars
      shell: bash
      run: |
        echo "build_date=$(date +"%Y%m%d")" >> $GITHUB_OUTPUT
        echo "sha_short=${GITHUB_SHA::6}" >> $GITHUB_OUTPUT

    - name: Webhook
      if: ${{ (matrix.targ == 'pistorm' || matrix.targ == 'pistorm-classic') && steps.deploy.outputs.uploaded == 'yes' }}
      uses: fjogeleit/http-request-action@master
      with:
        url: "${{ secrets.DISCORD_WEBHOOK }}"
        method: 'POST'
        data: '{"username":"Ziggsty the friendly Emu","avatar_url":"https://repository-images.githubusercontent.com/168139345/df1ee280-f4d7-11e9-98df-201401d8d375","content":"[**Emu68**]: New nightly available!","embeds":[{"title":"Emu68-${{matrix.targ}}-${{ steps.vars.outputs.build_date }}-${{ steps.vars.outputs.sha_short }}.zip","url":"https://github.com/michalsc/Emu68/releases/download/nightly/Emu68-${{matrix.targ}}-${{ steps.vars.outputs.build_date }}-${{ steps.vars.outputs.sha_short }}.zip"}]}'
        contentType: "application/json"
